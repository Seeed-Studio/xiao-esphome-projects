# Note !!!!!:
# If you are using the ESPHome Device Builder in Home Assistant
# make sure to download the ESPHome Device Builder (dev) version
# otherwise, you will not be able to compile this project.


substitutions:
  name: "xiao-smart-ir-mate"
  friendly_name: "XIAO Smart IR Mate"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: True
  project:
    name: "xiao.smart-ir-mate"
    version: "2.0"

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: arduino

globals:
  - id: is_wifi_connected
    type: bool
    initial_value: 'false'

  - id: reset_press_time
    type: uint32_t
    initial_value: '0'

  - id: touch_timer
    type: unsigned long
    restore_value: no
    initial_value: '0'

  # open or close the learning mode
  - id: is_learning_mode
    type: bool
    initial_value: 'false'

  # signal index , you can select the signal index on ESPHome
  - id: signal_select_index
    type: int
    restore_value: no
    initial_value: '0'

  # Read the signals stored in nvs and store them in this vector
  - id: send_data_vector
    type: std::vector<long int>
    restore_value: no

  - id: filter_size
    type: int
    initial_value: '10'

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:

ota:
  - platform: esphome
    password: "15afb09b5aba7b3d6a6ba01180c60df5"

wifi:
  on_connect:
    - globals.set:
        id: is_wifi_connected
        value: 'true'
    - light.turn_on: rgb_light
    - lambda: |-
        ESP_LOGI("ir", "IP address: %s", WiFi.localIP().toString().c_str());

  on_disconnect:
    - globals.set:
        id: is_wifi_connected
        value: 'false'

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    # ssid: "XIAO Smart IR Mate"
    password: "12345678"

captive_portal:

# Custom components
external_components:
  - source:
      type: git        # git component
      url: https://github.com/Seeed-Studio/xiao-esphome-projects  # Path where the component is github
      ref: main   # Branch name
    components: [Flash_comp]   # Explicitly specify the components to import

# Component name
Flash_comp:
  id: signal_nvs  # Component id

remote_transmitter:
  id: my_transmitter
  pin: GPIO3
  carrier_duty_percent: 50%

remote_receiver:
  - id: rcvr
    pin:
      number: GPIO4
      inverted: true
    # Idle time, if the low level exceeds this time, it is considered as a new segment of the signal
    # That is "segmentation"
    idle: 65500us
    # Important, this parameter is used to segment the infrared signal
    # If a certain segment of the infrared signal is too long, it may be divided into several segments
    # For such a case, you must send the infrared signal strictly according to the corresponding timing, otherwise it will fail
    # If you don't want it to be segmented, you can reduce the frequency and adjust the idle parameter to make it receive as complete as possible
    clock_resolution: "500000"
    # Receive data: using raw data
    # In the infrared parsing of esphome, a signal (e.g., NEC) may be parsed into multiple signals (e.g., JVC, Pronto, etc.).
    # Here, we only retain the original signal and do not decode the protocol.
    on_raw:
      - switch.turn_off: vibration_switch
      - lambda: |-
          if (id(is_learning_mode)) {
            if (x.size() > id(filter_size)){
              ESP_LOGI("ir", "Saved signal index: %d", id(signal_select_index));
              id(signal_nvs).save_to_nvs(id(signal_select_index), x);
              id(is_learning_mode) = false;
              // Learned the signal, turn on the switch
              id(is_learned_signal_script).execute(true);
            }
          }

button:
  # Button in learning mode, you need to open learning mode first, and the signal will be saved
  - platform: template
    id: learn
    name: "Learn"
    on_press:
      - switch.turn_on: vibration_switch
      - lambda: |-
          id(is_learning_mode) = true;
          ESP_LOGI("ir", "Learning mode activated!");

  # Button in sending mode, according to your current index, read the signal from nvs and send it
  # Since it's using a script to send, it will always trigger a log print whether the sending is successful or not
  # That is, it will print Sending signal index
  # So when there is a log print but the control doesn't work, you need to write a separate receiving code to analyze the data
  # It is recommended to use the example program in the Arduino IRremote library.
  - platform: template
    id: transmit
    name: "Send"
    on_press:
      - lambda: |-
          if (id(send_data_vector).size() > 0) {
            id(send_raw).execute();
            ESP_LOGI("ir", "Sending signal index: %d", id(signal_select_index));
            ESP_LOGI("ir", "Sending signal size: %d", id(send_data_vector).size());
          } else {
            ESP_LOGI("ir", "Signal index %d not learned", id(signal_select_index));
          }

# Signal selection dropdown list
# Provides ten signals to choose from, and records the index
select:
  - platform: template
    name: signal_select
    id: signal_select
    options:
      - "Signal0"
      - "Signal1"
      - "Signal2"
      - "Signal3"
      - "Signal4"
      - "Signal5"
      - "Signal6"
      - "Signal7"
      - "Signal8"
      - "Signal9"
    initial_option: "Signal0"
    optimistic: true
    on_value:
      - lambda: |-
          id(signal_select_index) = i;
          ESP_LOGI("ir", "Current selected signal index: %d", i);
          id(send_data_vector).clear();
          id(send_data_vector) = id(signal_nvs).load_from_nvs<long int>(id(signal_select_index));
          if (id(send_data_vector).size() > 0) {
            id(is_learned_signal_script).execute(true);
          } else {
            id(is_learned_signal_script).execute(false);
          }

switch:
  - platform: output
    id: vibration_switch
    name: "Vibration device"
    output: vibration_output

  - platform: factory_reset
    id: factory_switch
    name: "Restart with Factory Default Settings"

  # Has the signal been learned?
  # If the signal has been learned, turn on this switch.
  # Otherwise, turn off this switch.
  - platform: template
    id: is_learned_signal_switch
    name: "Is Learned Signal?"
    optimistic: true

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO7 # D5
    num_leds: 1
    chipset: WS2812
    name: "WIFI RGB Light"
    id: rgb_light
    rmt_symbols: 48

binary_sensor:
  - platform: gpio
    id: touch_pad
    pin:
      number: GPIO5 # D3
      mode: INPUT_PULLDOWN
    on_state:
      then:
        - lambda: |-
            id(vibe).execute(100);
            id(touch_timer) = millis();
            if (id(check_touch_delay).is_running()) {
              id(check_touch_delay).stop();
              delay(10);
            }
            id(check_touch_delay).execute();

  - platform: gpio
    id: reset_button
    pin:
      number: GPIO9 # D9
      mode: INPUT_PULLUP
    filters:
      invert

    on_press:
      then:
        - lambda: |-
            id(reset_press_time) = millis();

    on_release:
      then:
        - lambda: |-
            uint32_t press_duration = millis() - id(reset_press_time);
            if (press_duration < 5000) {
              id(vibe).execute(100);
              ESP_LOGI("ir", "Restart Device");
              ESP.restart();
            } else {
              // clear all learned signals
              for (int i = 0; i < 10; i++) {
                id(signal_nvs).clear_signal_by_index(i);
              }
              ESP_LOGI("ir", "Restart with Factory Default Settings");
              id(vibe).execute(500);
              id(factory_switch).turn_on();
            }

output:
  - platform: gpio
    id: vibration_output
    pin: GPIO6 # D4

script:
  - id: vibe
    parameters:
      delay_ms: int
    then:
      - switch.turn_on: vibration_switch
      - delay: !lambda return delay_ms;
      - switch.turn_off: vibration_switch

  - id: check_touch_delay
    then:
      - delay: 300ms
      - lambda: |-
          unsigned long current_time = millis();
          if (current_time - id(touch_timer) >= 300) {
            ESP_LOGI("check click", "single click action");
            id(transmit).press();
          }

  # Send infrared signal
  # The saved signal is the original signal, we do not encode or decode, just send
  - id: send_raw
    then:
      - remote_transmitter.transmit_raw:
          code: !lambda return id(send_data_vector);
          carrier_frequency: 38000Hz
          repeat: 1

  # Used to indicate whether the signal can be sent
  # If there is a signal, turn on the switch
  # Otherwise, turn off the switch
  - id: is_learned_signal_script
    parameters:
      is_learned_signal: bool
    then:
      - lambda: |-
          if (is_learned_signal) {
            id(is_learned_signal_switch).turn_on();
          } else {
            id(is_learned_signal_switch).turn_off();
          }

interval:
  - id: blink_rgb
    interval: 500ms
    then:
      - lambda: |-
          if (!id(is_wifi_connected)) {
            static int state = 0;
            if (state == 1) {
              auto call = id(rgb_light).turn_on();
              call.set_rgb(1.0, 1.0, 1.0);
              call.set_transition_length(0);
              call.perform();
            } else {
              auto call = id(rgb_light).turn_off();
              call.set_transition_length(0);
              call.perform();
            }
            state = !state;
          }